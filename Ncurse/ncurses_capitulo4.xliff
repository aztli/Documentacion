<?xml version='1.0' encoding='utf-8'?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.1" version="1.1">
  <file original="ncurses_capitulo4.odt" source-language="en" datatype="plaintext">
    <body>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[0]">
        <source>CHAPTER</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[1]">
        <source>4</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[2]">
        <source>Around the Window</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[4]">
        <source>One of the things that make NCurses appeal to programmers is the control it</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[5]">
        <source>offers, not only over the text you display but over the location of that text as</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[6]">
        <source>well. The key is moving the cursor. Secondary to that, of course, is knowing</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[7]">
        <source>how big the terminal screen (or, in NCurses, the standard screen window) can</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[8]">
        <source>be, so that you keep all your text visible.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[9]">
        <source>Measuring the Standard Screen</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[10]">
        <source>If you’re going to be moving the cursor hither, thither, and yon, it helps to</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[11]">
        <source>know the dimensions of your terminal screen. Not every terminal is going to</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[12]">
        <source>be exactly like yours, and it’s an especially bad thing to assume that all termi-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[13]">
        <source>nals follow the dimensions of the standard PC text screen’s 25 rows by 80</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[14]">
        <source>columns.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[15]">
        <source><g id="0"/>In NCurses the terminal screen isn’t part of the equation. Instead, a window</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[16]">
        <source>is used called the standard screen, which coincidentally is just the same size and</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[17]">
        <source>dimensions as the terminal’s screen. (Yes, this may seem trivial at this point,</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[18]">
        <source>but soon you’ll discover NCurses window functions, wherein all this makes</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[19]">
        <source>much more sense.)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[20]">
        <source><g id="1"/>47</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[21]">
        <source>The Size of the Window Is Y by X</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[22]">
        <source>To discover the size of any window in NCurses, the following function can be</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[23]">
        <source>used:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[24]">
        <source><g id="2"/>getmaxyx(win,y,x)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[25]">
        <source><g id="3"/>The getmaxyx() function returns the dimensions of the window win in</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[26]">
        <source>rows and columns, where y is the row and x is the column. That the function</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[27]">
        <source>is named getmaxyx() should help you remember that Y, or rows, comes first.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[28]">
        <source><g id="4"/>The win argument is the name of a specific window in NCurses. For the ter-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[29]">
        <source>minal screen, you use the standard screen window, which is named stdscr.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[30]">
        <source><g id="5"/>The y and x arguments are int variables (not pointers) that will hold</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[31]">
        <source>the maximum number of rows and columns in the named window. </source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[32]">
        <source>Listing 4-1: screensize.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[33]">
        <source><g id="6"/>1 <g id="7"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[34]">
        <source><g id="8"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[35]">
        <source><g id="9"/>3 <g id="10"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[36]">
        <source><g id="11"/>4 <g id="12"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[37]">
        <source><g id="13"/>5 <g id="14"/>int x,y;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[38]">
        <source><g id="15"/>6</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[39]">
        <source><g id="16"/>7 <g id="17"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[40]">
        <source><g id="18"/>8</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[41]">
        <source><g id="19"/>9 <g id="20"/>getmaxyx(stdscr,y,x);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[42]">
        <source><g id="21"/>10 <g id="22"/>printw(“Window size is %d rows, %d columns.\n”,y,x);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[43]">
        <source><g id="23"/>11 <g id="24"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[44]">
        <source><g id="25"/>12 <g id="26"/>getch();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[45]">
        <source><g id="27"/>13</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[46]">
        <source><g id="28"/>14 <g id="29"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[47]">
        <source><g id="30"/>15 <g id="31"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[48]">
        <source><g id="32"/>16 <g id="33"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[49]">
        <source>Because my terminal window is in a graphical window in a GUI, I can resize it. When I do and</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[50]">
        <source>make the window wider, rerunning the program reports the new results:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[51]">
        <source><g id="34"/>Windows size is 24 rows, 85 columns.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[52]">
        <source><x id="35" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[52]/text:soft-page-break[0]"/><g id="36"/>The point here is to remember that it’s a bad thing to guess the terminal’s</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[53]">
        <source>size. Write your code so that your program uses getmaxyx() to determine</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[54]">
        <source>the screen size and save those values in variables; do not use constants!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[55]">
        <source>And Now: the Shortcut</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[56]">
        <source>The getmaxyx() function can read the dimensions of any NCurses window,</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[57]">
        <source>but because the standard screen is special, there are two NCurses constants</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[58]">
        <source>you can use as well (refer to Listing 4-2):</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[59]">
        <source><g id="37"/>LINES</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[60]">
        <source><g id="38"/>COLS</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[61]">
        <source><g id="39"/>The value of the LINES constant is equal to the number of rows on the stan-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[62]">
        <source>dard screen window and, therefore, the terminal screen.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[63]">
        <source><g id="40"/>The value of COLS is equal to the number of columns on the standard screen</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[64]">
        <source>window, as well as the terminal.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[65]">
        <source>Listing 4-2: stdscrsize.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[66]">
        <source><g id="41"/>1 <g id="42"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[67]">
        <source><g id="43"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[68]">
        <source><g id="44"/>3 <g id="45"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[69]">
        <source><g id="46"/>4 <g id="47"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[70]">
        <source><g id="48"/>5 <g id="49"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[71]">
        <source><g id="50"/>6</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[72]">
        <source><g id="51"/>7 <g id="52"/>printw(“Window size is %d rows, %d columns.\n”,LINES,COLS);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[73]">
        <source><g id="53"/>8 <g id="54"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[74]">
        <source><g id="55"/>9 <g id="56"/>getch();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[75]">
        <source><g id="57"/>10</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[76]">
        <source><g id="58"/>11 <g id="59"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[77]">
        <source><g id="60"/>12 <g id="61"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[78]">
        <source><g id="62"/>13 <g id="63"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[79]">
        <source><g id="64"/>The output is the same as from the SCREENSIZE.C code, though LINES</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[80]">
        <source>and COLS are always specific to the standard screen.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[81]">
        <source><g id="65"/>Do remember that the Y constant is LINES, not ROWS.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[82]">
        <source>Moving the Cursor Around</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[83]">
        <source>In NCurses, the cursor — that thing that tells curses where to put the next</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[84]">
        <source>character on the screen — is moved around via the move() function but also</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[85]">
        <source>by most commands that put text to the screen. As you’ve seen in early chap-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[86]">
        <source>ters, putting a \n to the screen moves the text down to the next line. Nothing</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[87]">
        <source>surprising there.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[88]">
        <source><g id="66"/>To provide basic cursor control, there is only one command:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[89]">
        <source><g id="67"/>move(y,x)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[90]">
        <source>You’ve already seen this command at work in Chapter 2, and there’s really</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[91]">
        <source>nothing to it. But in this chapter I’ll add three more interesting commands that</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[92]">
        <source>combine moving the cursor with slapping down text:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[93]">
        <source><g id="68"/>mvaddch(y,x,ch)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[94]">
        <source><g id="69"/>mvaddstr(y,x,*str)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[95]">
        <source><g id="70"/>mvprintw(y,x,format,arg[...])</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[96]">
        <source><g id="71"/>Oh, you could probably guess how they go, but I love sample programs, and</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[97]">
        <source>the urge to create them is just too great! So follow along and learn a tad bit more</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[98]">
        <source>about moving the cursor in NCurses.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[99]">
        <source>Watch Out! I’ve Got You Cornered!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[100]">
        <source>There are four corners on the standard screen: upper left, upper right, lower</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[101]">
        <source>left, and lower right. And you know what would just look lovely in each</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[102]">
        <source>corner? Why, an asterisk, that’s what. Just like the program in Listing 4-3</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[103]">
        <source>demonstrates:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[104]">
        <source><x id="72" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[104]/text:soft-page-break[0]"/>Listing 4-3: corners1.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[105]">
        <source><g id="73"/>1 <g id="74"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[106]">
        <source><g id="75"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[107]">
        <source><g id="76"/>3 <g id="77"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[108]">
        <source><g id="78"/>4 <g id="79"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[109]">
        <source><g id="80"/>5 <g id="81"/>int rows,cols;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[110]">
        <source><g id="82"/>6</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[111]">
        <source><g id="83"/>7 <g id="84"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[112]">
        <source><g id="85"/>8 <g id="86"/>getmaxyx(stdscr,rows,cols);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[113]">
        <source><g id="87"/>9 <g id="88"/>rows--;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[114]">
        <source><g id="89"/>10 <g id="90"/>cols--;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[115]">
        <source><g id="91"/>11</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[116]">
        <source><g id="92"/>12 <g id="93"/>move(0,0); <g id="94"/>/* UL corner */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[117]">
        <source><g id="95"/>13 <g id="96"/>addch(‘*’);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[118]">
        <source><g id="97"/>14 <g id="98"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[119]">
        <source><g id="99"/>15 <g id="100"/>napms(500); <g id="101"/>/* pause half a sec. */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[120]">
        <source><g id="102"/>16</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[121]">
        <source><g id="103"/>17 <g id="104"/>move(0,cols); <g id="105"/>/* UR corner */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[122]">
        <source><g id="106"/>18 <g id="107"/>addch(‘*’);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[123]">
        <source><g id="108"/>19 <g id="109"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[124]">
        <source><g id="110"/>20 <g id="111"/>napms(500);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[125]">
        <source><g id="112"/>21</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[126]">
        <source><g id="113"/>22 <g id="114"/>move(rows,0); <g id="115"/>/* LL corner */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[127]">
        <source><g id="116"/>23 <g id="117"/>addch(‘*’);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[128]">
        <source><g id="118"/>24 <g id="119"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[129]">
        <source><g id="120"/>25 <g id="121"/>napms(00);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[130]">
        <source><g id="122"/>26</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[131]">
        <source><g id="123"/>27 <g id="124"/>move(rows,cols); <g id="125"/>/* LR corner */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[132]">
        <source><g id="126"/>28 <g id="127"/>addch(‘*’);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[133]">
        <source><g id="128"/>29 <g id="129"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[134]">
        <source><g id="130"/>30 <g id="131"/>getch();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[135]">
        <source><g id="132"/>31</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[136]">
        <source><g id="133"/>32 <g id="134"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[137]">
        <source><g id="135"/>33 <g id="136"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[138]">
        <source><g id="137"/>34 <g id="138"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[139]">
        <source><g id="139"/>The program slaps down an asterisk in every corner of the screen.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[140]">
        <source><g id="140"/>Line 12 isn’t necessary; NCurses initializes the cursor at the home location of</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[141]">
        <source>0,0 when the standard screen window is created by initscr(). Even so, I rec-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[142]">
        <source>ommend using a move(0,0); statement in your code just in case future edi-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[143]">
        <source>tions of NCurses change and because it’s never really a good idea to assume</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[144]">
        <source>anything in your code.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[145]">
        <source>Some Compacting</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[146]">
        <source>The folks who write and maintain NCurses came to a strong realization many</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[147]">
        <source>years ago that any move() function is usually followed by a command to actu-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[148]">
        <source>ally stick text on the screen. I mean, the following code in any program would</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[149]">
        <source>be rather silly:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[150]">
        <source><g id="141"/>move(10,13); <g id="142"/>/* move to here */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[151]">
        <source><g id="143"/>move(5,6); <g id="144"/>/* then to here */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[152]">
        <source><g id="145"/>move(17,11); <g id="146"/>/* try out this spot */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[153]">
        <source><g id="147"/>move(21,0); <g id="148"/>/* then put the cursor here */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[154]">
        <source><g id="149"/>What’s the point of all that? No, sir, move() functions are followed by some</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[155]">
        <source>type of text output function or statement. And you already know three of</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[156]">
        <source><x id="150" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[156]/text:soft-page-break[0]"/>them: addch(), addstr(), and printw(). By prefixing mv (for move) to each</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[157]">
        <source>of those commands, you get a combined move-and-print command.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[158]">
        <source><g id="151"/>Listing 4-4 shows a modification, do-over to the original 4corner.c source</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[159]">
        <source>code:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[160]">
        <source>Listing 4-4: corners2.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[161]">
        <source><g id="152"/>1 <g id="153"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[162]">
        <source><g id="154"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[163]">
        <source><g id="155"/>3 <g id="156"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[164]">
        <source><g id="157"/>4 <g id="158"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[165]">
        <source><g id="159"/>5 <g id="160"/>int rows,cols;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[166]">
        <source><g id="161"/>6</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[167]">
        <source><g id="162"/>7 <g id="163"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[168]">
        <source><g id="164"/>8 <g id="165"/>getmaxyx(stdscr,rows,cols);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[169]">
        <source><g id="166"/>9 <g id="167"/>rows--;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[170]">
        <source><g id="168"/>10 <g id="169"/>cols--;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[171]">
        <source><g id="170"/>11</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[172]">
        <source><g id="171"/>12 <g id="172"/>mvaddch(0,0,’*’); <g id="173"/>/* UL corner */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[173]">
        <source><g id="174"/>13 <g id="175"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[174]">
        <source><g id="176"/>14 <g id="177"/>napms(500); <g id="178"/>/* pause half a sec. */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[175]">
        <source><g id="179"/>15</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[176]">
        <source><g id="180"/>16 <g id="181"/>mvaddch(0,cols,’*’); <g id="182"/>/* UR corner */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[177]">
        <source><g id="183"/>17 <g id="184"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[178]">
        <source><g id="185"/>18 <g id="186"/>napms(500);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[179]">
        <source><g id="187"/>19</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[180]">
        <source><g id="188"/>20 <g id="189"/>mvaddch(rows,0,’*’); <g id="190"/>/* LL corner */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[181]">
        <source><g id="191"/>21 <g id="192"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[182]">
        <source><g id="193"/>22 <g id="194"/>napms(500);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[183]">
        <source><g id="195"/>23</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[184]">
        <source><g id="196"/>24 <g id="197"/>mvaddch(rows,cols,’*’); <g id="198"/>/* LR corner */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[185]">
        <source><g id="199"/>25 <g id="200"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[186]">
        <source><g id="201"/>26</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[187]">
        <source><g id="202"/>27 <g id="203"/>getch();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[188]">
        <source><g id="204"/>28</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[189]">
        <source><g id="205"/>29 <g id="206"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[190]">
        <source><g id="207"/>30 <g id="208"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[191]">
        <source><g id="209"/>31 <g id="210"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[192]">
        <source><g id="211"/>The output is the same, but you’ve saved a lot of typing and redundancy.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[193]">
        <source>Note the format for the mvaddch() function:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[194]">
        <source><g id="212"/>mvaddch(y,x,ch)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[195]">
        <source><g id="213"/>The row and column come first, and the character to punch in that spot goes</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[196]">
        <source>last. Again, this is just like combining the two functions, move() and</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[197]">
        <source>addch().</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[198]">
        <source>Center that Title!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[199]">
        <source>It’s possible to have lots of fun with math and positioning text all over the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[200]">
        <source>screen. Don’t run away! Remember that the computer does the math. Center-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[201]">
        <source>ing text on the screen is an old and ancient art. It works like this:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[202]">
        <source><g id="214"/>1. Figure out how wide the screen is.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[203]">
        <source><g id="215"/>2. Figure out how wide your title text is.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[204]">
        <source><g id="216"/>3. Subtract the title text length from the screen width. The value left over</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[205]">
        <source><g id="217"/>needs to be shared equally as spaces on either side of the title.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[206]">
        <source><g id="218"/>4. Divide the value left over by two. That’s the number of characters to</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[207]">
        <source><g id="219"/>space over to center the title.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[208]">
        <source><x id="220" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[208]/text:soft-page-break[0]"/><g id="221"/>But don’t fret over writing that code yourself. The following program in</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[209]">
        <source>Listing 4-5 has it all done for you.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[210]">
        <source>Listing 4-5: ctitle.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[211]">
        <source><g id="222"/>1 <g id="223"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[212]">
        <source><g id="224"/>2 <g id="225"/>#include &lt;string.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[213]">
        <source><g id="226"/>3</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[214]">
        <source><g id="227"/>4 <g id="228"/>void center(int row, char *title);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[215]">
        <source><g id="229"/>5</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[216]">
        <source><g id="230"/>6 <g id="231"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[217]">
        <source><g id="232"/>7 <g id="233"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[218]">
        <source><g id="234"/>8 <g id="235"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[219]">
        <source><g id="236"/>9</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[220]">
        <source><g id="237"/>10 <g id="238"/>center(1, <g id="239"/>“Penguin Soccer Finals”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[221]">
        <source><g id="240"/>11 <g id="241"/>center(5, <g id="242"/>“Cattle Dung Samples from Temecula”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[222]">
        <source><g id="243"/>12 <g id="244"/>center(7, <g id="245"/>“Catatonic Theater”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[223]">
        <source><g id="246"/>13 <g id="247"/>center(9, <g id="248"/>“Why Do Ions Hate Each Other?”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[224]">
        <source><g id="249"/>14 <g id="250"/>getch();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[225]">
        <source><g id="251"/>15</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[226]">
        <source><g id="252"/>16 <g id="253"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[227]">
        <source><g id="254"/>17 <g id="255"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[228]">
        <source><g id="256"/>18 <g id="257"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[229]">
        <source><g id="258"/>19</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[230]">
        <source><g id="259"/>20 <g id="260"/>void center(int row, char *title)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[231]">
        <source><g id="261"/>21 <g id="262"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[232]">
        <source><g id="263"/>22 <g id="264"/>int len,indent,y,width;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[233]">
        <source><g id="265"/>23</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[234]">
        <source><g id="266"/>24 <g id="267"/>getmaxyx(stdscr,y,width); <g id="268"/>/* get screen width */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[235]">
        <source><g id="269"/>25</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[236]">
        <source><g id="270"/>26 <g id="271"/>len = strlen(title); <g id="272"/>/* get title’s length */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[237]">
        <source><g id="273"/>27 <g id="274"/>indent = width – len; <g id="275"/>/* subtract it from screen width */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[238]">
        <source><g id="276"/>28 <g id="277"/>indent /= 2; <g id="278"/>/* divide result into two */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[239]">
        <source><g id="279"/>29</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[240]">
        <source><g id="280"/>30 <g id="281"/>mvaddstr(row,indent,title);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[241]">
        <source><g id="282"/>31 <g id="283"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[242]">
        <source><g id="284"/>32 <g id="285"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[243]">
        <source><g id="286"/>The center() function is what centers the title text on a line. You supply</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[244]">
        <source>the row number and the line of text to center. The center() function then</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[245]">
        <source>centers that text on the given row.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[246]">
        <source><g id="287"/>N OT E Remember that the top row on the terminal screen is zero, not 1!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[247]">
        <source><g id="288"/>I included several center() commands with titles of varying length. Feel</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[248]">
        <source>free to add more or experiment with the lengths.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[249]">
        <source><g id="289"/>The math part is done in the center() function. First, the string’s length</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[250]">
        <source>is calculated and returned by the strlen() function and stored in the len</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[251]">
        <source>variable. Then that’s subtracted from the screen’s width, as returned from</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[252]">
        <source>getmaxyx(). Then it’s cut in half in line 28.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[253]">
        <source>Some Fun with mvprintw()</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[254]">
        <source>Why do the math when the compiler can do it for you? One gem with</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[255]">
        <source>printf(), and then, of course, NCurses’ printw(), is that it can justify</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[256]">
        <source>strings in its output. For example:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[257]">
        <source><g id="290"/>printf(“%40s”, “This is right-justified”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[258]">
        <source><g id="291"/>The %s normally tells printf() to replace the %s with a string. The %40s,</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[259]">
        <source>however, tells printf() to set aside 40 spaces in which to stick the string. As</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[260]">
        <source><x id="292" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[260]/text:soft-page-break[0]"/>with numbers, the string is right-justified:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[261]">
        <source><g id="293"/>________________This is right-justified</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[262]">
        <source><g id="294"/>Now if you prefix the size of the field with a minus sign, you get left-justi-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[263]">
        <source>fied output:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[264]">
        <source><g id="295"/>printf(“%-40s”, “This is left-justified”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[265]">
        <source><g id="296"/>The –40 means to set aside 40 spaces and left-justify the given string. To wit:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[266]">
        <source><g id="297"/>This is left-justified_________________</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[267]">
        <source><g id="298"/>This calculating feature of printf(), and therefore printw()and there-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[268]">
        <source>fore mvprintw(), can be put to use to do interesting justification on the screen</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[269]">
        <source>without a lot of mathematical overhead, as the following program in Listing</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[270]">
        <source>4-6 demonstrates:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[271]">
        <source>Listing 4-6: mydata.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[272]">
        <source><g id="299"/>1 <g id="300"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[273]">
        <source><g id="301"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[274]">
        <source><g id="302"/>3 <g id="303"/>#define COL1 5</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[275]">
        <source><g id="304"/>4 <g id="305"/>#define COL2 38</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[276]">
        <source><g id="306"/>5</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[277]">
        <source><g id="307"/>6 <g id="308"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[278]">
        <source><g id="309"/>7 <g id="310"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[279]">
        <source><g id="311"/>8 <g id="312"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[280]">
        <source><g id="313"/>9</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[281]">
        <source><g id="314"/>10 <g id="315"/>mvprintw(5,COL1, “%30s”, “Your name:”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[282]">
        <source><g id="316"/>11 <g id="317"/>mvprintw(5,COL2, “%-30s”, “Art Grockmeister”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[283]">
        <source><g id="318"/>12</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[284]">
        <source><g id="319"/>13 <g id="320"/>mvprintw(7,COL1, “%30s”, “Your company:”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[285]">
        <source><g id="321"/>14 <g id="322"/>mvprintw(7,COL2, “%-30s”, “Sterling/Worbletyme”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[286]">
        <source><g id="323"/>15</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[287]">
        <source><g id="324"/>16 <g id="325"/>mvprintw(9,COL1, “%30s”, “Position:”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[288]">
        <source><g id="326"/>17 <g id="327"/>mvprintw(9,COL2, “%-30s”, “Grand Duke of Finance”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[289]">
        <source><g id="328"/>18</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[290]">
        <source><g id="329"/>19 <g id="330"/>mvprintw(11,COL1, “%30s”, “Date hired:”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[291]">
        <source><g id="331"/>20 <g id="332"/>mvprintw(11,COL2, “%-30s”, “October 19, 1993”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[292]">
        <source><g id="333"/>21 <g id="334"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[293]">
        <source><g id="335"/>22 <g id="336"/>getch();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[294]">
        <source><g id="337"/>23</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[295]">
        <source><g id="338"/>24 <g id="339"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[296]">
        <source><g id="340"/>25 <g id="341"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[297]">
        <source><g id="342"/>26 <g id="343"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[298]">
        <source><g id="344"/>The move-cursor commands don’t seem to be logical until you think of</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[299]">
        <source>them as placing given 30-character fields on the screen. Remember that the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[300]">
        <source>printw() function is doing the alignment.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[302]">
        <source><g id="345"/>You can adjust the positions of the columns easily by changing the values of</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[303]">
        <source>the COL1 and COL2 constants. This is why they were declared as constants</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[304]">
        <source>instead of being hard-coded into the program.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[305]">
        <source>Whither the Cursor?</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[306]">
        <source>Knowing where the cursor is doesn’t seem as popular or necessary a function</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[307]">
        <source>as being able to move the cursor. But consider the case where a program</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[308]">
        <source>involves full-screen user input. In that example, it helps to have a function that</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[309]">
        <source>tracks down where the booger is.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[310]">
        <source><g id="346"/>The getyx() function reads the logical cursor location from the window</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[311]">
        <source>win (stdscr for the standard screen) and puts its row and column positions</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[312]">
        <source><x id="347" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[312]/text:soft-page-break[0]"/>into the variables y and x. As with the move() function, the home location 0,0</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[313]">
        <source>is the upper-left corner of the screen. (See Listing 4-7.)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[314]">
        <source>Listing 4-7: whereami.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[315]">
        <source><g id="348"/>1 <g id="349"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[316]">
        <source><g id="350"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[317]">
        <source><g id="351"/>3 <g id="352"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[318]">
        <source><g id="353"/>4 <g id="354"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[319]">
        <source><g id="355"/>5 <g id="356"/>char ch=’\0’; <g id="357"/>/* initialize ch to NULL */</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[320]">
        <source><g id="358"/>6 <g id="359"/>int row,col;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[321]">
        <source><g id="360"/>7</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[322]">
        <source><g id="361"/>8 <g id="362"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[323]">
        <source><g id="363"/>9</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[324]">
        <source><g id="364"/>10 <g id="365"/>addstr(“Type some text; ‘~’ to end:\n”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[325]">
        <source><g id="366"/>11 <g id="367"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[326]">
        <source><g id="368"/>12</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[327]">
        <source><g id="369"/>13 <g id="370"/>while( (ch=getch()) != ‘~’);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[328]">
        <source><g id="371"/>14 <g id="372"/></source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[329]">
        <source><g id="373"/>15</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[330]">
        <source><g id="374"/>16 <g id="375"/>getyx(stdscr,row,col);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[331]">
        <source><g id="376"/>17 <g id="377"/>printw(“\n\nThe cursor was at row %d, column %d\n”,row,col);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[332]">
        <source><g id="378"/>18 <g id="379"/>printw(“when you stopped typing.”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[333]">
        <source><g id="380"/>19 <g id="381"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[334]">
        <source><g id="382"/>20 <g id="383"/>getch();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[335]">
        <source><g id="384"/>21</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[336]">
        <source><g id="385"/>22 <g id="386"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[337]">
        <source><g id="387"/>23 <g id="388"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[338]">
        <source><g id="389"/>24 <g id="390"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[339]">
        <source><g id="391"/>The program lets you type away on the screen, similar to the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[340]">
        <source>typewriter.c program shown earlier in this book. When you press the tilde</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[341]">
        <source>key, ~, the getyx function grabs the location of the cursor, and the printw</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[342]">
        <source>statement tells you where it was.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[343]">
        <source><g id="392"/>Note that the function is named getyx(), not getxy().</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[344]">
        <source><g id="393"/>Here’s a sample of the output you may see:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[345]">
        <source><g id="394"/>Type some text; ‘~’ to end:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[346]">
        <source><g id="395"/>Bill is a jerk!~</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[347]">
        <source><g id="396"/>The cursor was at row 1, column 16</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[348]">
        <source><g id="397"/>When you stopped typing.</source>
      </trans-unit>
    </body>
  </file>
</xliff>
