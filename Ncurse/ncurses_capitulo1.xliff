<?xml version='1.0' encoding='utf-8'?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.1" version="1.1">
  <file original="ncurses_capitulo1.odt" source-language="en" datatype="plaintext">
    <body>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[0]">
        <source>CHAPTER</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[1]">
        <source>1</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[2]">
        <source>The Setup</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[4]">
        <source>This chapter covers a basic setup and organization for you to get started with</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[5]">
        <source>NCurses programming. Here you’ll find:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[7]">
        <source><g id="0"/>■■ An introduction to the terminal window in UNIX</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[8]">
        <source><g id="1"/>■■ A smattering of basic shell commands</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[9]">
        <source><g id="2"/>■■ Creating a special curses directory for this document’s programs</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[10]">
        <source><g id="3"/>■■ A review of available text editors</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[11]">
        <source><g id="4"/>■■ The creation of a basic NCurses program</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[12]">
        <source><g id="5"/>■■ A review of the gcc compiler and linking commands</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[13]">
        <source><g id="6"/>■■ Re-editing source code and debugging exercises</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[15]">
        <source><g id="7"/>The idea here is to show you how everything works and to get you com-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[16]">
        <source>fortable programming with NCurses, even if you’ve never written a UNIX</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[17]">
        <source>program before.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[19]">
        <source>You must have a UNIX-like operating system to work the samples and exam-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[20]">
        <source>ples in this book.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[22]">
        <source><g id="8"/>Beyond this, note that you must also have the programming libraries</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[23]">
        <source>installed for your operating system. Without those libraries, programming in</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[24]">
        <source>NCurses just isn’t gonna happen. Refer to your operating system’s installation</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[25]">
        <source>or setup program, such as /stand/sysinstall in FreeBSD, to install the C</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[26]">
        <source>programming libraries for your operating system. If special extensions are</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[27]">
        <source>required to get the NCurses library installed, use them!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[29]">
        <source><g id="9"/>N OT E It’s possible to program NCurses in Windows when using the Cygwin</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[30]">
        <source><g id="10"/>environment. I’ve not toyed with Cygwin, so I’m unable to comment on it here.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[31]">
        <source><g id="11"/>For more information, refer to <g id="12">www.cygwin.com</g>.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[33]">
        <source>Run (Don’t Walk) to a Terminal Screen Near You</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[34]">
        <source>NCurses is about programming the terminal screen, so you’ll need access to a</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[35]">
        <source>terminal screen or window to run the programs.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[37]">
        <source><g id="13"/>You can either use one of the virtual terminals (which you can access on</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[38]">
        <source>most PCs by pressing Alt+F1, Alt+F2, Alt+F3, and so on) or open a terminal</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[39]">
        <source>window in the X Window System environment or in Mac OS X using the Ter-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[40]">
        <source>minal program. (See Figure 1-1.)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[42]">
        <source>Figure 1-1: A terminal window for Mac OS X</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[43]">
        <source><g id="14"/>Note that the terminal you choose can affect what NCurses does. Not all ter-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[44]">
        <source>minal types can, for example, do color or draw lines on the screen.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[46]">
        <source>Know Something About the Shell</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[47]">
        <source>The program you use in the terminal screen is a shell. It displays a shell prompt</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[48]">
        <source>and lets you type one of the gazillions of UNIX commands and what not —</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[49]">
        <source>which is all basic UNIX stuff.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[52]">
        <source><x id="15" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[52]/text:soft-page-break[0]"/><g id="16"/>The following sections review basic shell operations and a smattering of</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[53]">
        <source>commands. If you feel you already know this, skim up to the section titled</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[54]">
        <source>“Make a Place for Your Stuff.”</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[55]">
        <source>Some Shelly Stuff</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[56]">
        <source>For example, the standard Bourne shell may look like this:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[57]">
        <source><g id="17"/>$</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[58]">
        <source><g id="18"/>The dollar sign is the prompt, and you type your commands after the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[59]">
        <source>prompt.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[60]">
        <source><g id="19"/>The Bash shell, popular with Linux, may look like this:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[61]">
        <source><g id="20"/>Bash-2.05a$</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[62]">
        <source><g id="21"/>Or the shell may be customized to display your login name:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[63]">
        <source><g id="22"/>dang$</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[64]">
        <source><g id="23"/>Or even the working directory:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[65]">
        <source><g id="24"/>/home/dang/$</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[66]">
        <source><g id="25"/>Whatever!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[67]">
        <source><g id="26"/>No one really cares about which shell you use, but you should know enough</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[68]">
        <source>shell commands to be able to do these things:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[69]">
        <source><g id="27"/>■■ <g id="28"/>Make directories</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[70]">
        <source><g id="29"/>■■ <g id="30"/>Display a file’s contents</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[71]">
        <source><g id="31"/>■■ <g id="32"/>Copy files</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[72]">
        <source><g id="33"/>■■ <g id="34"/>Rename files</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[73]">
        <source><g id="35"/>■■ <g id="36"/>Remove files</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[74]">
        <source><g id="37"/>It’s beyond the scope of this book to teach you such stuff, though a handy</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[75]">
        <source>list of popular shell commands is provided at the end of this chapter.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[76]">
        <source><g id="38"/>Note that this book does not display the shell prompt when you’re directed</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[77]">
        <source>to enter a command. Simply type the command; then press Enter to send the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[78]">
        <source>command to the shell program for processing.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[79]">
        <source><g id="39"/>It is always assumed that you press the Enter key to input the command.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[80]">
        <source><g id="40"/>N OT E Please do check your typing! The shell is very fussy about getting things</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[81]">
        <source><g id="41"/>correct. In the Bash shell, you’ll see a command not found error when you</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[82]">
        <source><g id="42"/>mistype something:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[83]">
        <source><g id="43"/>-bash: tcc: command not found</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[84]">
        <source>Know Your History, Because You’re Going to Repeat It</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[85]">
        <source>One handy shell feature you should take advantage of is the history. Various</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[86]">
        <source>history commands allow you to recall previously typed text at the command</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[87]">
        <source>prompt. This is commonly done as you edit, compile, re-edit, and recompile</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[88]">
        <source>your code.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[89]">
        <source><g id="44"/>For example, most of the time you’re using this book you’ll be cycling</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[90]">
        <source>through three sets of commands. First comes the editing:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[91]">
        <source><g id="45"/>vim goodbye.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[92]">
        <source><g id="46"/>Then comes the compiling:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[93]">
        <source><g id="47"/>gcc –lncurses goodbye.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[94]">
        <source><g id="48"/>Then comes the running:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[95]">
        <source><g id="49"/>./a.out</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[96]">
        <source><g id="50"/>I’ll cover these steps in detail later, but for now recognize that these</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[97]">
        <source>commands are to be repeated over and over: Edit, compile, run (or test); then</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[98]">
        <source>re-edit, recompile, and test again. To assist you in that task, employ your</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[99]">
        <source>shell’s history function.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[100]">
        <source><g id="51"/>In the Bash shell, for example, use the up arrow key on your keyboard to</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[101]">
        <source>recall a previous command. To recall the second previous command, press the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[102]">
        <source>up arrow key twice. I’m not intimate with the other shells, so if you use the C</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[103]">
        <source>shell or Bourne shell, review your documentation for any history commands</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[104]">
        <source><x id="52" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[104]/text:soft-page-break[0]"/>available with those shells.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[105]">
        <source>Make a Place for Your Stuff</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[106]">
        <source>Please do be organized and build yourself a handy little directory into which you</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[107]">
        <source>can save, compile, and test the various programs presented in this document.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[108]">
        <source><g id="53"/>For example, in my home directory, I have the following set up:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[109]">
        <source><g id="54"/>$HOME/prog/c/ncurses</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[110]">
        <source><g id="55"/>$HOME is the home directory, the shell variable that represents your</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[111]">
        <source>account’s home directory for most UNIX shells that I’ve played with. It can</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[112]">
        <source>also be abbreviated as ~/ in some shells.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[113]">
        <source><g id="56"/>Then I have a subdirectory called PROG, which contains all my program-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[114]">
        <source>ming junk and test files. PROG contains subdirectories for C language pro-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[115]">
        <source>grams, Perl programs, shell scripts, and whatever else I’m dabbling in.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[116]">
        <source><g id="57"/>The C subdirectory contains C programs and directories.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[117]">
        <source><g id="58"/>Finally, the NCURSES directory is where I built all the sample files for this</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[118]">
        <source>book.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[119]">
        <source><g id="59"/>You should consider a similar setup for your system, even if it’s just some-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[120]">
        <source>thing like $HOME/ncurses. As long as you can keep all the sample files</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[121]">
        <source>around and be able to access them later, you’ll be a happy camper.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[122]">
        <source><g id="60"/>If you want to create a ~/PROG/C/NCURSES directory for your stuff, you</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[123]">
        <source>can use the following command in your home directory:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[124]">
        <source><g id="61"/>mkdir –p prog/c/ncurses</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[125]">
        <source><g id="62"/>The –p switch directs mkdir to build all parent directories to the final</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[126]">
        <source>NCurses directory.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[127]">
        <source>Using an Editor to Create an NCurses Program</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[128]">
        <source>There’s no point in bothering with a fancy developer environment or IDE</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[129]">
        <source>when you’re programming NCurses. I think you’ll be happier using the termi-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[130]">
        <source>nal window and a shell prompt, unless you’ve been totally corrupted by some</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[131]">
        <source>IDE. Then you’re on your own!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[132]">
        <source>Picking an Editor</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[133]">
        <source>Since day one of UNIX, a text editor has been used to create code. That’s what</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[134]">
        <source>I recommend for this book. Any text editor will do, and most UNIX-like oper-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[135]">
        <source>ating systems give you a smattering of editors to choose from:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[136]">
        <source><g id="63"/>■■ <g id="64"/>ee. The “easy editor” is a popular choice for many UNIX newcomers.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[137]">
        <source><g id="65"/>No one will think any less of you for using ee, especially if you’re using</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[138]">
        <source><g id="66"/>it with your C programming.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[139]">
        <source><g id="67"/>■■ <g id="68"/>emacs. This is the most popular choice, mostly because its commands</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[140]">
        <source><g id="69"/>are more word processor-like and you don’t have to keep whacking the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[141]">
        <source><g id="70"/>Escape key as you do in vi/vim.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[142]">
        <source><g id="71"/>■■ <g id="72"/>vim. This is my personal choice, simply because it’s so damn raw and</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[143]">
        <source><g id="73"/>complex. As you get used to vim, though, it becomes a very powerful</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[144]">
        <source><g id="74"/>and handy tool. Plus it’s common to all Unixes.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[145]">
        <source><g id="75"/>Whenever this book tells you to edit or create some source code, you’ll use</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[146]">
        <source>your favorite text editor to make it happen. (And please do create these pro-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[147]">
        <source>grams in your NCurses directory, as covered in the previous section.)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[148]">
        <source><g id="76"/>If you don’t know any editors, I recommend ee as the easiest. Otherwise,</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[149]">
        <source>this book does not teach you how to use any text editor; I assume you’ll figure</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[150]">
        <source>that out on your own.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[151]">
        <source>Creating Your First NCurses Program</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[152]">
        <source>Rather than just discuss all this stuff, why not get moving?</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[153]">
        <source><g id="77"/>Use the cd command to change directories to the NCURSES directory</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[154]">
        <source>you just created. You can confirm which directory you’re using with the pwd</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[155]">
        <source>command.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[156]">
        <source><x id="78" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[156]/text:soft-page-break[0]"/><g id="79"/>This is what I see on my screen:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[157]">
        <source><g id="80"/>/HOME/DANG/PROG/C/NCURSES</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[158]">
        <source><g id="81"/>Your screen will probably show something different. The point is the same:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[159]">
        <source>You’re in the NCURSES directory and ready to create some source code with</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[160]">
        <source>your editor.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[161]">
        <source><g id="82"/>Source code is presented in this book as follows: First comes the filename,</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[162]">
        <source>then the source code. To the left are line numbers for reference purposes only.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[163]">
        <source>Do not type the line numbers!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[164]">
        <source><g id="83"/>Use your editor to name (or create) the file; then input all the text exactly as</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[165]">
        <source>shown in Listing 1-1.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[166]">
        <source>Listing 1-1: GOODBYE.C</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[167]">
        <source><g id="84"/>1 <g id="85"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[168]">
        <source><g id="86"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[169]">
        <source><g id="87"/>3 <g id="88"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[170]">
        <source><g id="89"/>4 <g id="90"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[171]">
        <source><g id="91"/>5 <g id="92"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[172]">
        <source><g id="93"/>6 <g id="94"/>addstr(Goodbye, cruel C programming!);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[173]">
        <source><g id="95"/>7</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[174]">
        <source><g id="96"/>8 <g id="97"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[175]">
        <source><g id="98"/>9 <g id="99"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[176]">
        <source><g id="100"/>10 <g id="101"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[177]">
        <source><g id="102"/>So if you’re using vim, you would type:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[178]">
        <source><g id="103"/>vim goodbye.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[179]">
        <source><g id="104"/>Then you would enter the text into the editor using your favorite, cryptic</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[180]">
        <source>vim commands.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[181]">
        <source><g id="105"/>N OT E Note that some compilers require there to be an extra blank line</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[182]">
        <source><g id="106"/>following the last line of code. This is not shown above or in any sample code</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[183]">
        <source><g id="107"/>in this document.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[184]">
        <source><g id="108"/>When you’re done entering text, double-check to ensure that you didn’t</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[185]">
        <source>miss anything.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[186]">
        <source><g id="109"/>Note that from now on it’s assumed that whenever you see source code as</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[187]">
        <source>shown here, you are to type it and name it according to the source code head-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[188]">
        <source>ing. And, naturally, you don’t have to type every program, only those you want</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[189]">
        <source>to experiment with.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[190]">
        <source>Some Deviations</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[191]">
        <source>The next step in the programming process is compiling and linking, handled</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[192]">
        <source>deftly by the common GCC command. But before compiling and linking, con-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[193]">
        <source>sider a few sidetracks, just to get you oriented if you’re not used to program-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[194]">
        <source>ming in UNIX.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[195]">
        <source><g id="110"/>Use the ls command to view the contents of your NCURSES directory.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[196]">
        <source><g id="111"/>The ls command displays or lists the files in the directory, one of which</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[197]">
        <source>should be goodbye.c. Confirm that.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[198]">
        <source><g id="112"/>~/prog/c/ncurses$ <g id="113"/>ls</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[199]">
        <source><g id="114"/>goodbye.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[200]">
        <source><g id="115"/>~/prog/c/ncurses$</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[201]">
        <source><g id="116"/>You can also use the long variation on the ls command to see more details.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[202]">
        <source><g id="117"/>~/prog/c/ncurses$ ls -l</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[203]">
        <source><g id="118"/>total 8</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[204]">
        <source><g id="119"/>-rw-r--r-- <g id="120"/>1 dang dang <g id="121"/>113 dec <g id="122"/>7 13:02 goodbye.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[205]">
        <source><g id="123"/>~/prog/c/ncurses$</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[206]">
        <source><g id="124"/>Now you can see permissions, owner, group, file size, and date information</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[207]">
        <source>for the GOODBYE.C file — all of which help to confirm the file’s existence.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[208]">
        <source><x id="125" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[208]/text:soft-page-break[0]"/><g id="126"/>Finally, you can view the file’s contents with the cat command:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[209]">
        <source><g id="127"/>~/prog/c/ncurses$ <g id="128"/>cat goodbye.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[210]">
        <source><g id="129"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[211]">
        <source><g id="130"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[212]">
        <source><g id="131"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[213]">
        <source><g id="132"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[214]">
        <source><g id="133"/>addstr(Goodbye, cruel C programming!);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[215]">
        <source><g id="134"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[216]">
        <source><g id="135"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[217]">
        <source><g id="136"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[218]">
        <source><g id="137"/>~/prog/c/ncurses$</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[219]">
        <source><g id="138"/>And there is the file yet again on the screen.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[220]">
        <source><g id="139"/>Typing ls and cat are not required steps in the program-creation process. I</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[221]">
        <source>just like to remind you of their use here, which I liken to peering into the mail</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[222]">
        <source>drop box twice just to confirm that your mail actually made it into the box and</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[223]">
        <source>is not somehow stuck on the hinged lid.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[224]">
        <source><g id="140"/>Time to compile!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[225]">
        <source>Know Thy Compiler</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[226]">
        <source>The standard C compiler in the UNIX environment is gcc, the GNU C com-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[227]">
        <source>piler. Here is how it works in this book: You will see source code listed, such as</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[228]">
        <source>the goodbye.c program. You will immediately know to type it and compile it.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[229]">
        <source><g id="141"/>To compile, you will type something at the shell prompt, perhaps like this:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[230]">
        <source><g id="142"/>gcc goodbye.c –lncurses</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[231]">
        <source><g id="143"/>That’s the gcc command, your compiler.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[232]">
        <source><g id="144"/>The first option is the name of the source code file, the text file you created.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[233]">
        <source>In this case, it’s named goodbye.c. The single, lowercase c denotes a stan-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[234]">
        <source>dard C source code file, not C++.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[235]">
        <source><g id="145"/>Finally comes –lncurses, which tells the compiler to -l “link in” the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[236]">
        <source>NCurses library. This is very important! NCurses is not just a header file; it’s</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[237]">
        <source>also a library. And you must link in the library to have those NCurses functions</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[238]">
        <source>work.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[239]">
        <source><g id="146"/>Use this command:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[240]">
        <source><g id="147"/>gcc goodbye.c –lncurses</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[241]">
        <source><g id="148"/>And you’re compiled. Or not.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[242]">
        <source>Linking NCurses or Curses?</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[243]">
        <source>On most systems I’ve visited, both the CURSES and NCURSES libraries are the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[244]">
        <source>same thing, meaning that if you link in -lcurses instead of -lncurses,</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[245]">
        <source>the results are the same. The only advantage here is that typing -lcurses</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[246]">
        <source>saves you a keystroke. Otherwise, I recommend using -lncurses.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[247]">
        <source>What Does the gcc Command Do?</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[248]">
        <source>The gcc command either outputs a slew of error messages or shows you</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[249]">
        <source>nothing.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[250]">
        <source><g id="149"/>When you get a slew of error messages, you must re-edit the source file and</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[251]">
        <source>try to work out whatever bugs you can. The compiler is brutally honest, but</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[252]">
        <source>it’s also nice in that it does give you a line number to show you where (approx-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[253]">
        <source>imately) you screwed up.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[254]">
        <source><g id="150"/>When gcc does nothing, the source code is properly compiled and linked.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[255]">
        <source>This is what you want.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[256]">
        <source><g id="151"/>In this case, I’ve tricked you into typing sloppy code so that you’ll see an</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[257]">
        <source>error message. Something like:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[258]">
        <source><g id="152"/>goodbye.c:6: macro ‘addstr’ used with too many (2) args</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[259]">
        <source><g id="153"/>One variation of the gcc compiler yielded even more information:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[260]">
        <source><x id="154" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[260]/text:soft-page-break[0]"/><g id="155"/>goodbye.c:6:45: macro “addstr” passed 2 arguments, but takes just 1</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[261]">
        <source><g id="156"/>These error messages are just oozing with information:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[262]">
        <source><g id="157"/>■■ <g id="158"/>goodbye.c tells you which source code file is offensive.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[263]">
        <source><g id="159"/>■■ <g id="160"/>The 6 tells you that the error is either in line 6 or the previous line. In</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[264]">
        <source><g id="161"/>the second example, the 45 tells you which column in the line is offen-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[265]">
        <source><g id="162"/>sive — very specific.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[266]">
        <source><g id="163"/>■■ <g id="164"/>Then the error message itself; something is apparently wrong with the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[267]">
        <source><g id="165"/>call to the addstr macro. Must fix.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[268]">
        <source><g id="166"/>N OT E If you didn’t see the error message, you probably have been coding C</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[269]">
        <source><g id="167"/>for some time and just put the addstr() function’s text in double quotes out</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[270]">
        <source><g id="168"/>of habit. Good for you!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[271]">
        <source>Re-editing Your Source Code</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[272]">
        <source>In programming you do more re-editing than editing. In this case, the error</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[273]">
        <source>was on purpose so I could show you how the compiler displays an error mes-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[274]">
        <source>sage. The fix is easy: Just edit the GOODBYE.C source code file again.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[275]">
        <source><g id="169"/>Don’t forget to use your shell’s history (if available) to recall that editing</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[276]">
        <source>command!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[277]">
        <source><g id="170"/>N OT E Here’s a tip: Familiarize yourself with the editor’s command that</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[278]">
        <source><g id="171"/>instantly jumps to a specific line number. Most of your editing will actually be</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[279]">
        <source><g id="172"/>re-editing, where the compiler directs you to a specific line number. If you</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[280]">
        <source><g id="173"/>know the line-number-jumping command, you can get there quickly to fix your</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[281]">
        <source><g id="174"/>source code and try (again) to compile it:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[282]">
        <source><g id="175"/>In vim, the line number skipping command is nG, where n is the line number</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[283]">
        <source><g id="176"/>and G is Shift+G. Thus, typing 6G will get you right to line 6.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[284]">
        <source><g id="177"/>The line should read:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[285]">
        <source><g id="178"/>addstr(“Goodbye, cruel C programming!”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[286]">
        <source><g id="179"/>Then you should save the file to disk and re-compile it. But nothing hap-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[287]">
        <source>pens. That’s good! However....</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[288]">
        <source>Where Is the Program?</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[289]">
        <source>The program gcc creates is named a.out. It’s a binary file, and its permis-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[290]">
        <source>sions are all properly set so that the operating system knows it’s a program file</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[291]">
        <source>and not a slice of Velveeta.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[292]">
        <source><g id="180"/>Use the ls command to confirm that a.out exists, if you like.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[293]">
        <source><g id="181"/>To run the program, you need to focus on the current directory: ./A.OUT.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[294]">
        <source><g id="182"/>You can’t just type a.out, because the operating system looks only to the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[295]">
        <source>search path for programs to run. So you must specifically direct tired old UNIX</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[296]">
        <source>to look in the current directory — abbreviated by the . single dot — to run the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[297]">
        <source>program.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[298]">
        <source><g id="183"/>So ./ means “look in the current directory” and A.OUT means “run the file</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[299]">
        <source>named a.out.”</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[300]">
        <source><g id="184"/>Of course, if you have the manual dexterity, you can always type a full path-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[301]">
        <source>name, something like:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[302]">
        <source><g id="185"/>~/prog/c/ncurses/a.out</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[303]">
        <source><g id="186"/>This also runs the a.out program, but I believe you’ll find typing ./A.OUT</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[304]">
        <source>a lot easier.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[305]">
        <source><g id="187"/>Nothing happens, not even an error. Again, there is a problem and you need</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[306]">
        <source>to re-edit and recompile.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[307]">
        <source>Fixing Stuff (Again)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[308]">
        <source>Fixing stuff (again) in this case means that you forgot a key NCurses com-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[309]">
        <source>mand. (Or more properly, fixing it again here means that I didn’t specify a</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[310]">
        <source>command on purpose simply to drive this point home.)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[311]">
        <source><g id="188"/>The problem? You didn’t use the refresh() function, which is a common</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[312]">
        <source><x id="189" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[312]/text:soft-page-break[0]"/>blunder in NCurses programming. Only by using refresh() is the NCurses</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[313]">
        <source>“window” updated and any text written to the screen displayed. So, back to</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[314]">
        <source>the editor!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[315]">
        <source><g id="190"/>Insert the refresh() function after the addstr() function on line 6. Your</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[316]">
        <source>code should look like Listing 1-2, complete.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[317]">
        <source>Listing 1-2: goodbye.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[318]">
        <source><g id="191"/>1 <g id="192"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[319]">
        <source><g id="193"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[320]">
        <source><g id="194"/>3 <g id="195"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[321]">
        <source><g id="196"/>4 <g id="197"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[322]">
        <source><g id="198"/>5 <g id="199"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[323]">
        <source><g id="200"/>6 <g id="201"/>addstr(“Goodbye, cruel C programming!”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[324]">
        <source><g id="202"/>7 <g id="203"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[325]">
        <source><g id="204"/>8</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[326]">
        <source><g id="205"/>9 <g id="206"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[327]">
        <source><g id="207"/>10 <g id="208"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[328]">
        <source><g id="209"/>11 <g id="210"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[329]">
        <source><g id="211"/>Double-check your work.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[330]">
        <source><g id="212"/>Remember that you can use your shell’s history to quickly recall those com-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[331]">
        <source>mon commands: your editor, your compiler, and the ./a.out command.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[332]">
        <source>Figure 1-2: Output of the GOODBYE.C code.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[333]">
        <source><g id="213"/>Now it should work, and you’ll see the string thrown up onto the screen via</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[334]">
        <source>NCurses, as shown in Figure 1-2. Congratulations!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[335]">
        <source>Don’t Panic When You Still Don’t See Anything!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[336]">
        <source>Even with the refresh() function in the code, it’s still possible that you</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[337]">
        <source>won’t see any program output. The problem isn’t the program or even</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[338]">
        <source>NCurses; it’s your terminal.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[339]">
        <source><g id="214"/>Many terminals, such as xterm, support a feature known as rmcup. It</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[340]">
        <source>restores the screen to what it looked like before a program was run. The situa-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[341]">
        <source>tion also occurs with any full-screen terminal program, such as man or less; the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[342]">
        <source>program’s text disappears after you quit the program, and the prompt</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[343]">
        <source>“window” is restored.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[344]">
        <source><g id="215"/>Sadly, there is no handy way to switch off rmcup support from a terminal</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[345]">
        <source>window. The terminfo file for the terminal needs to be recompiled to remove</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[346]">
        <source>rmcup support, or a new terminfo file needs to be created in your home</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[347]">
        <source>directory, one that lacks rmcup as an option.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[348]">
        <source><g id="216"/>The quick solution is to use the getch() function in your code. By inserting</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[349]">
        <source>a line with getch() before the endwin() function, you can pause output and</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[350]">
        <source>see what NCurses does before the program quits, as shown in Listing 1-3.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[351]">
        <source>Listing 1-3: goodbye.c</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[352]">
        <source><g id="217"/>1 <g id="218"/>#include &lt;ncurses.h&gt;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[353]">
        <source><g id="219"/>2</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[354]">
        <source><g id="220"/>3 <g id="221"/>int main(void)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[355]">
        <source><g id="222"/>4 <g id="223"/>{</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[356]">
        <source><g id="224"/>5 <g id="225"/>initscr();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[357]">
        <source><g id="226"/>6 <g id="227"/>addstr(“Goodbye, cruel C programming!”);</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[358]">
        <source><g id="228"/>7 <g id="229"/>refresh();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[359]">
        <source><g id="230"/>8 <g id="231"/>getch();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[360]">
        <source><g id="232"/>9</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[361]">
        <source><g id="233"/>10 <g id="234"/>endwin();</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[362]">
        <source><g id="235"/>11 <g id="236"/>return 0;</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[363]">
        <source><g id="237"/>12 <g id="238"/>}</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[364]">
        <source><x id="239" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[364]/text:soft-page-break[0]"/><g id="240"/>The new line 8 was added, allowing the program to pause, and for you to</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[365]">
        <source>read the output.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[366]">
        <source><g id="241"/>Many of the program examples in this book use getch() to pause output.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[367]">
        <source>But some programs do not; be sure to use getch() in your code to see output,</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[368]">
        <source>or modify your terminfo file to disable the rmcup feature.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[369]">
        <source><g id="242"/>N OT E It might also help to be vocal about the rmcup feature for future</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[370]">
        <source><g id="243"/>releases of your operating system. While many folks may see rmcup as a handy</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[371]">
        <source><g id="244"/>thing, other users dislike it. The solution is to make the feature easy to disable.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[372]">
        <source><g id="245"/>Let’s hope that will be possible sooner than later.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[373]">
        <source>Do You Think a.out Is a Goofy Name?</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[374]">
        <source>Yes, a.out is a goofy name, but that’s because the compiler doesn’t know any</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[375]">
        <source>better.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[376]">
        <source><g id="246"/>For running the myriad test programs in this book, using a.out will be a</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[377]">
        <source>blessing. It won’t take up as much disk space as individually compiling each</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[378]">
        <source>program and creating separate silly little programs, plus it means you can</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[379]">
        <source>instantly recall the ./a.out command using your shell’s history command.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[380]">
        <source><g id="247"/>But anyway, if you’d rather compile to a different output file, you need to</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[381]">
        <source>specify the –o switch when you use gcc. It goes like this:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[382]">
        <source><g id="248"/>gcc goodbye.c –lncurses –o goodbye</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[383]">
        <source><g id="249"/>gcc is still the compiler.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[384]">
        <source><g id="250"/>goodbye.c is the source code.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[385]">
        <source><g id="251"/>-lncurses directs the compiler to link in the NCurses library.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[386]">
        <source><g id="252"/>And finally, -o goodbye tells gcc to create the output file named goodbye</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[387]">
        <source>as opposed to creating a.out.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[388]">
        <source><g id="253"/>Use the preceding command to accomplish this.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[389]">
        <source><g id="254"/>Do not forget the ./ prefix! Silly old UNIX needs to know where to find the</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[390]">
        <source>file. So you must type ./GOODBYE to run the program.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[391]">
        <source><g id="255"/>By the way, the output file doesn’t have to be the same name as the source</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[392]">
        <source>code file. You could use the following command if you like:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[393]">
        <source><g id="256"/>gcc goodbye.c –lncurses –o cloppyfeen</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[394]">
        <source><g id="257"/>This creates the program file named cloppyfeen from the source code</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[395]">
        <source>found in goodbye.c., so what you name the final program file can be any-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[396]">
        <source>thing you like.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[397]">
        <source>All Done!</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[398]">
        <source>That pretty much does it for your whirlwind introduction to NCurses pro-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[399]">
        <source>gramming using the C language in the UNIX environment. This chapter has</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[400]">
        <source>imparted the following knowledge, stuff that you’ll need to carry with you</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[401]">
        <source>throughout the remainder of this document:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[402]">
        <source>General Info</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[403]">
        <source>Keep in mind that it’s a good idea to keep your learning NCurses files in your</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[404]">
        <source>special NCURSES directory. This is assumed.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[405]">
        <source><g id="258"/>Do remember those handy shell history commands. You’ll be doing a lot of</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[406]">
        <source>repetitious commands here, and pressing the up arrow key is a lot easier than</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[407]">
        <source>retyping boring old UNIX commands.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[408]">
        <source><g id="259"/>And from now on, I will not be reminding you to specifically input, compile,</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[409]">
        <source>and run the sample programs. There may be other, specific instructions given</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[410]">
        <source>in the text, but whenever you see source code, it’s assumed that you can type</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[411]">
        <source>it in and run it if you want to learn more.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[412]">
        <source>Handy Shell Commands to Know</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[413]">
        <source><g id="260"/>cat <g id="261"/>Displays a text file (source code) to the screen</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[414]">
        <source><g id="262"/>clear <g id="263"/>Clears the screen</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[415]">
        <source><g id="264"/>cp <g id="265"/>Copies a file</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[416]">
        <source><x id="266" xid="office:document-content[0]/office:body[0]/office:text[0]/text:p[416]/text:soft-page-break[0]"/><g id="267"/>ls –l <g id="268"/>Lists files in the long format</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[417]">
        <source><g id="269"/>ls <g id="270"/>Lists files</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[418]">
        <source><g id="271"/>mv <g id="272"/>Moves or renames a file</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[419]">
        <source><g id="273"/>rm <g id="274"/>Removes (deletes) a file</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[420]">
        <source>Source Code Tidbits</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[421]">
        <source>End the source code file with .C to show that it’s a C language source code file.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[422]">
        <source>(Some editors, such as vim, may even recognize this and bless you with color-</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[423]">
        <source>coded, in context contents as you edit.)</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[424]">
        <source><g id="275"/>The main() function is an int and must return a value to the shell via</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[425]">
        <source>either return or the exit() function.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[426]">
        <source><g id="276"/>If you use the exit() function, remember to include the STDLIB.H header</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[427]">
        <source>file at the top of your source code.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[428]">
        <source><g id="277"/>If the program seems not to display anything, remember to add a getch()</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[429]">
        <source>function before the endwin() function.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[430]">
        <source>Compiling Tips</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[431]">
        <source>The compiler used in this book is gcc.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[432]">
        <source><g id="278"/>You must link in the NCurses library by using the –lncurses option to</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[433]">
        <source>properly compile these programs.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[434]">
        <source><g id="279"/>The program file produced is always named a.out.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[435]">
        <source><g id="280"/>You must type ./a.out to test run the program file.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[436]">
        <source><g id="281"/>You can use the –o compiler option to specify the name of the output file as</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[437]">
        <source>something different from a.out.</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[438]">
        <source><g id="282"/>The compiler command format is:</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[439]">
        <source><g id="283"/>gcc filename.c –lncurses</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[440]">
        <source><g id="284"/>You supply the filename according to the source code name given in this</source>
      </trans-unit>
      <trans-unit xml:space="preserve" id="office:document-content[0]/office:body[0]/office:text[0]/text:p[441]">
        <source>document.</source>
      </trans-unit>
    </body>
  </file>
</xliff>
